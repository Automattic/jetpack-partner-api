openapi: 3.0.0

info:
  title: 'Jetpack Partner - Coupon API'
  description: 'A set of endpoints that allows Jetpack partners to issue and manage coupons.'
  version: 0.3.0
  contact:
    email: partners@jetpack.com
  license:
    name: GPL 2.0
    url: 'https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html'

tags:
  - name: coupon
    description: 'A set of endpoints that allows Jetpack partners to issue and manage individual coupon.'
  - name: coupons
    description: 'A set of endpoints that allows Jetpack partners to issue and manage a collection of coupons.'
  - name: presets
    description: 'A set of endpoints that allows Jetpack partners to interact with coupon presets.'

servers:
  - url: https://public-api.wordpress.com/wpcom/v2/jetpack-partner/coupon/v1
    description: 'Jetpack Partner API via WordPress.com'

paths:
  /coupon:
    get:
      tags:
        - coupon
      summary: 'Get the status of a coupon.'
      operationId: couponStatus
      parameters:
        - name: coupon_code
          description: 'Unique coupon code.'
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/CouponCode'
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: 'OK. Response body contains the coupon.'
          headers:
            X-Jetpack-Request-Id:
              $ref: '#/components/headers/X-Jetpack-Request-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NoPartner'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      tags:
        - coupon
      summary: 'Issue a new coupon.'
      operationId: issueCoupon
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                preset:
                  description: A coupon preset slug. See the Preset schema for more information.
                  type: string
                  example: 'preset1'
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: 'OK. Response body contains the newly issued coupon.'
          headers:
            X-Jetpack-Request-Id:
              $ref: '#/components/headers/X-Jetpack-Request-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NoPartner'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'

    delete:
      tags:
        - coupon
      summary: 'Revoke a coupon permanently.'
      operationId: revokeCoupon
      parameters:
        - name: coupon_code
          description: 'Unique coupon code.'
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/CouponCode'
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: 'OK. Response body contains the coupon that was revoked.'
          headers:
            X-Jetpack-Request-Id:
              $ref: '#/components/headers/X-Jetpack-Request-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NoPartner'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /coupons:
    post:
      tags:
        - coupons
      summary: 'Issue a collection of new coupons.'
      operationId: issueCoupons
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                preset:
                  description: A coupon preset slug. See the Preset schema for more information.
                  type: string
                  example: 'preset1'
                quantity:
                  description: The amount of coupons that should be returned.
                  type: integer
                  format: int32
                  minimum: 1
                  maximum: 500
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: 'OK. Response body contains a list of newly issued coupons.'
          headers:
            X-Jetpack-Request-Id:
              $ref: '#/components/headers/X-Jetpack-Request-Id'
          content:
            application/json:
              schema:
                type: array
                description: 'A list of coupon objects.'
                items:
                  $ref: '#/components/schemas/Coupon'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NoPartner'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'

  /presets:
    get:
      tags:
        - presets
      summary: 'Get all available presets.'
      operationId: presetsStatus
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: 'OK. Response body contains a list of presets'
          headers:
            X-Jetpack-Request-Id:
              $ref: '#/components/headers/X-Jetpack-Request-Id'
          content:
            application/json:
              schema:
                type: array
                description: 'A list of presets and their corresponding properties.'
                items:
                  $ref: '#/components/schemas/Preset'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NoPartner'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'

externalDocs:
  description: 'Learn more about integrating with this API.'
  url: https://github.com/Automattic/jetpack-partner-api

components:
  schemas:
    Coupon:
      type: object
      properties:
        coupon_code:
          $ref: '#/components/schemas/CouponCode'
        products:
          $ref: '#/components/schemas/Products'
        discount:
          $ref: '#/components/schemas/Discount'
        used_at:
          type: string
          format: date-time
          nullable: true
        expired:
          type: boolean

    CouponCode:
      type: string
      example: 'partner_0.TG9yZW0gaXBzd'

    Products:
      type: array
      description: 'Jetpack products the coupon can be applied for.'
      items:
        type: string
        enum:
          - 'jetpack-backup-daily'
          - 'jetpack-backup-realtime'
          - 'jetpack-scan'
          - 'jetpack-anti-spam'
          - 'jetpack-security-daily'
          - 'jetpack-security-realtime'
          - 'jetpack-complete'

    Discount:
      type: number
      format: double
      description: 'The percentage of discount the coupon offers.'
      minimum: 1
      maximum: 100
      example: 50

    Preset:
      description: >
        A Preset determines the properties of coupons issued with it such as the discount amount
        and products the coupon is usable for. Presets are predefined and provided by the Jetpack Infinity team.

        All available presets can be fetched from the /presets endpoint.
      type: object
      properties:
        slug:
          type: string
          description: Unique coupon identifier.
          example: 'preset1'
        products:
          $ref: '#/components/schemas/Products'
        discount:
          $ref: '#/components/schemas/Discount'

    ErrorMessage:
      type: object
      properties:
        code:
          type: string
          example: 'api_message_code'
        message:
          type: string
          example: 'Human-readable API message.'
        data:
          type: object
          description: 'The data object will always contain a status property but might also contain additional error data.'
          properties:
            status:
              type: integer
              example: 403

  headers:
    X-Jetpack-Request-Id:
      description: 'Unique request id.'
      schema:
        type: string
      example: 'TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQu'

  responses:
    BadRequest:
      description: 'Invalid input. The request has to be modified.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            rest_missing_callback_param:
              value:
                code: 'rest_missing_callback_param'
                message: 'Missing parameter(s): param1, param2, param3'
                data:
                  status: 400
            rest_invalid_param:
              value:
                code: 'rest_invalid_param'
                message: 'Invalid parameter(s): param1, param2, param3'
                data:
                  status: 400
            rest_invalid_params:
              value:
                code: 'rest_invalid_params'
                message: 'Invalid parameters.'
                data:
                  status: 400

    NoPartner:
      description: 'No partner found'
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: 'no_partner_found'
              message:
                type: string
                example: 'No partner found'
              data:
                type: object
                properties:
                  status:
                    type: integer
                    example: 401

    Forbidden:
      description: 'Insufficient permissions.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            tos_consent_required:
              value:
                code: 'tos_consent_required'
                message: 'You must agree to the Terms of Service before you can use the API.'
                data:
                  status: 403
            rest_forbidden:
              value:
                code: 'rest_forbidden'
                message: 'Sorry, you are not allowed to do that.'
                data:
                  status: 403

    NotFound:
      description: 'Resource not found.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            coupon_do_not_exist:
              value:
                code: 'coupon_does_not_exist'
                message: 'The coupon does not exist.'
                data:
                  status: 404

    InternalError:
      description: 'Internal Server Error.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            coupon_could_not_be_issued:
              value:
                code: 'coupon_could_not_be_issued'
                message: 'The coupon could not be issued.'
                data:
                  status: 500
            coupon_could_not_be_revoked:
              value:
                code: 'coupon_could_not_be_revoked'
                message: 'The coupon could not be revoked.'
                data:
                  status: 500

  securitySchemes:
    ApiKeyAuth:
      type: http
      scheme: bearer
      bearerFormat: OAuth2
      description: 'A token will be provided to you when you register as a Jetpack partner.'
